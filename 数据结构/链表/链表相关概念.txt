链表和数组类似,都是存储一系列的元素,但是链表和数组的实现机制不同
链表中的元素在内存中不是连续的空间
链表的每一个元素都由一个元素节点和一个指向其他元素的引用组成

相对于数组的优点
内存空间不必连续,可以充分的实现动态内存管理
删除和插入元素效率高,只需改变指针的指向即可
链表不必创建时就确定大小,并且大小可以无限延伸下去

相对于数组的缺点
在查找元素时,效率低.
链表访问一个元素时,必须从第一个元素开始

链表常见操作
append(ele):向列表尾部添加一个新的项
insert(position,element):向链表的特定位置插入一个新的项

get(position):获取对应位置的元素
indexOf(ele):返回元素在列表中的索引,如果列表中没有该元素则返回-1;

update:修改某个位置的元素

removeAt(position):从列表的特定位置移除一项.
remove(ele):从列表中移除一项

isEmpty():如果链表中不包含任何元素,则返回true,否则返回false

size():返回链表包含的元素个数.2与数组的length属性类似
toString():由于列表使用了Node类,就需要重写继承自JavaScript对象的默认toString方法,让其只输出元素的值

单向链表
只能从头遍历到尾或从尾遍历到头,链表是相连的过程是单向的,一个节点包含对下一个节点的引用
缺点
很难回到前一个节点

双向链表
既可以从头遍历到尾,又可以从尾遍历到头
一个节点既有向前连接的引用,也有向后连接的引用

缺点
每次在插入或珊瑚某个节点时,需要处理四个引用,而不是两个
并且相对于单向链表来说内存空间更大一些

双向链表的特点
1.有一个head和一个tail分别指向头部和尾部节点
2.每个节点由三部分组成:前一个节点的指针(prev),保存的元素(item),后一个节点的指针(next)
3.双向链表的最后的节点的next是null,第一个节点的prev是null
封装时,应考虑多种边界情况